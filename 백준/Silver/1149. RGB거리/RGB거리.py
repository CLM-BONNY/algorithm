# 입력 받기
N = int(input())

# 각 집을 RGB로 칠하는 비용 리스트에 저장
costs = [list(map(int, input().split())) for _ in range(N)]

# 동적 프로그래밍을 위한 2차원 리스트 초기화
# dp[i][j]는 i번째 집을 j색으로 칠했을 때의 최소 비용
dp = [[0, 0, 0] for _ in range(N)]

# 첫 번째 집의 비용은 그대로 사용
dp[0] = costs[0]

# 두 번째 집부터 마지막 집까지 반복
for i in range(1, N):
    # i번째 집을 빨강(0)으로 칠할 경우, i-1번째 집의 초록(1)과 파랑(2) 중 최소값에 현재 빨강 비용을 더함
    dp[i][0] = min(dp[i-1][1], dp[i-1][2]) + costs[i][0]
    
    # i번째 집을 초록(1)으로 칠할 경우, i-1번째 집의 빨강(0)과 파랑(2) 중 최소값에 현재 초록 비용을 더함
    dp[i][1] = min(dp[i-1][0], dp[i-1][2]) + costs[i][1]
    
    # i번째 집을 파랑(2)으로 칠할 경우, i-1번째 집의 빨강(0)과 초록(1) 중 최소값에 현재 파랑 비용을 더함
    dp[i][2] = min(dp[i-1][0], dp[i-1][1]) + costs[i][2]

# 마지막 집까지 칠했을 때의 최소 비용 출력
print(min(dp[N-1]))
